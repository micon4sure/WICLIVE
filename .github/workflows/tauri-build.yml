name: Build and Release WIC LIVE

on:
  push:
    branches: [ master ]

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Bun
        run: |
          irm bun.sh/install.ps1 | iex
          echo "C:\Users\runneradmin\.bun\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
        shell: powershell

      - name: Install Bun modules
        run: bun install
        shell: powershell

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build Tauri app with Bun
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ""
          WICLIVE_ENV: production
        run: bun run tauri build
        shell: powershell

      - name: Get version from tauri.conf.json
        id: get_version
        run: |
          $version = (Get-Content ./src-tauri/tauri.conf.json -Raw | ConvertFrom-Json).package.version
          echo "::set-output name=version::$version"
        shell: powershell

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/bundle/nsis/wiclive_${{ steps.get_version.outputs.version }}_x64-setup.exe
          asset_name: wiclive_${{ steps.get_version.outputs.version }}_x64-setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset NSIS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/bundle/nsis/wiclive_${{ steps.get_version.outputs.version }}_x64-setup-nsis.zip
          asset_name: wiclive_${{ steps.get_version.outputs.version }}_x64-setup-nsis.zip
          asset_content_type: application/octet-stream

      - name: Upload Release Asset NSIS SIG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/bundle/nsis/wiclive_${{ steps.get_version.outputs.version }}_x64-setup-nsis.zip.sig
          asset_name: wiclive_${{ steps.get_version.outputs.version }}_x64-setup-nsis.zip.sig
          asset_content_type: application/octet-stream

      - name: Encode Signature File
        id: encode_signature
        run: |
          $signaturePath = "./target/release/bundle/nsis/wiclive_${{ steps.get_version.outputs.version }}_x64-setup-nsis.zip.sig"
          $signatureContent = Get-Content $signaturePath -Raw
          $encodedSignature = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($signatureContent))
          echo "signature=$encodedSignature" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        shell: powershell

      
      - name: Generate version.json in the docs directory
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $url = "https://github.com/${{ github.repository }}/releases/download/$version/wiclive_$version_x64-setup.exe"
          $signature = $env:signature
          $json = @{
            version = $version
            platforms = @{
              "windows-x86_64" = @{
                signature = $signature
                url = $url
              }
            }
          } | ConvertTo-Json -Depth 3
          $jsonPath = "docs/version.json"
          New-Item -Path $jsonPath -ItemType File -Force
          $json | Out-File -FilePath $jsonPath -Encoding utf8
        shell: powershell

      - name: Commit and Push version.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/version.json
          git commit -m "Update version.json for ${{ steps.get_version.outputs.version }}"
          git push
        shell: bash
